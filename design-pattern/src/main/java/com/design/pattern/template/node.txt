模板模式(template pattern)中，一个抽象类定义了执行它的方式/模板。它的子类可以按需要
重写方法实现，但调用将以抽象类中定义的方式进行。这种类型的设计模式属于行为型模式。

介绍
意图:定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变
算法的结构即可重定义该算法的某些特定步骤。
主要解决:一些方法通用，却在每一个子类都重写了这一方法。
何时使用:有一些用的方法
如何解决:将这些通用算法抽象出来
关键代码:在抽象类中实现，其他步骤在子类实现
应用实例:spring对Hibernate的支持，将一些已经定义好的方法封装起来，比如开启事务、
获取Session、关闭Session等，程序员不重写那些已经规范好的代码，直接丢一个实体就
可以保存。
优点:1、封装不变部分，拓展可变部分。2、提取公共代码，便于维护。3、行为由父类控制，
子类实现。
缺点:每一个不同的实现都需要一个子类来实现，导致类的个数增加，是的系统更加庞大。
使用场景:
1、算法的整体步骤很固定，但其中个别部分易变时，这时候可以使用模板方法
方式，将容易变的部分抽象出来，供子类实现。
2、当多个子类存在公共的行为时，可以将
其提取出来并集中到一个公共的父类中以避免代码重复。首先，要识别现有代码中的不同
之处，并且将不同之处分离为新的操作。最后用一个调用这些新的操作的模板方法来替换
这些不同的代码。
3、当需要控制子类的拓展时，模板方法只存在特定点调用钩子操作，这样
就只允许在这些点进行拓展。
注意事项:为防止恶意操作，一般模板方法都加上final关键词

模式的结构与实现
模板方法模式需要注意抽象类与子类之间的协作。它用到了子虚函数的多态技术以及“不用
调用我，让我来调用你”的反向控制技术。

模式的结构
模板方法模式包含以下主要角色。
1.1 抽象类/抽象模板(Abstract Class)
抽象模板类，负责给出一个算法的轮廓和骨架。它由一个模板方法和若干哥基本方法构成。
这些方法的定义如下。
a.模板方法:定义了算法的基本骨架，按某种顺序调用其包含的基本方法。
b.基本方法:是整个算法中的一个步骤，包含以下几种类型。
  抽象方法:在抽象类中声明，由具体子类实现。
  具体方法：在抽象类中已经实现，在具体的子类中可以继承或重写它。
  钩子方法：在抽象类中已经实现，包括用于判断的逻辑方法和需要子类重写的空方法
1.2 具体子类/具体实现(Concrete Class)
具体实现类，实现抽象类中所定义的抽象方法和钩子方法，它们是一个顶级逻辑的组成步骤
